# Makefile for building on *NIX systems.
 
SHELL = /bin/sh

#### Start of system configuration section ####

# Armadillo library.
ARMA_INCLUDE = /usr/local/include
ARMA_LIB     = /usr/local/lib

# Source directory.
srcdir = ./chem

# Common installation prefix.
prefix = @prefix@

# Installation directory for executables.
bindir = $(prefix)/bin

# Installation directory for header files.
includedir = $(prefix)/include

# Installation directory for object code libraries.
libdir = $(prefix)/lib

# Compiler settings.
CXX       = @cxx@
CXXFLAGS += @cxxflags@
CPPFLAGS  = -I. -I$(ARMA_INCLUDE) @cppflags@
DEPFLAGS  = @cxx_depflag@
LDFLAGS  += -L$(ARMA_LIB) @ldflags@
DEFS      = @defs@

# Do not build shared library on Cygwin.
ifneq ($(shell uname -s | sed -e s/\-.*//), CYGWIN_NT)
	CXXFLAGS += @cxx_shared_flag@ 
	LDFLAGS  += @cxx_shared_ldflag@
endif

ifeq ($(CXX), icpc)
	AR = xiar
else
	AR = ar
endif

# Set LAPACK library.
ifdef MKL_ROOT
	MKLROOT = $(MKL_ROOT)
endif
ifdef MKLROOT
	DEFS     += -DUSE_MKL_HEADERS
	CPPFLAGS += -I$(MKLROOT)/include
	ifeq ($(shell uname -m), x86_64)
		LDFLAGS  += -L$(MKLROOT)/lib/intel64
		ARMALIB = -lmkl_intel_ilp64 -lmkl_sequential -lmkl_core \
				  -lpthread -lm 
	else
		LDFLAGS  += -L$(MKLROOT)/lib/ia32
		ARMALIB = -lmkl_intel -lmkl_sequential -lmkl_core \
				  -lpthread -lm 
	endif
else
	ARMALIB = -larmadillo
endif

.SUFFIXES:
.SUFFIXES: .cpp .h .d .o .a .so

#### End of system configuration section ####

LIBSHARED = libchem.so
LIBSTATIC = libchem.a

ifeq ($(shell uname -s | sed -e s/\-.*//), CYGWIN_NT)
	LIBCHEM = $(LIBSTATIC)
else
	LIBCHEM = $(LIBSHARED) $(LIBSTATIC)
endif

SRC :=	argparse.cpp input.cpp ptable.cpp constants.cpp molecule_io.cpp \
		molecule.cpp molrot.cpp math.cpp zmatrix.cpp
SRC := 	$(addprefix $(srcdir)/,$(SRC))
OBJ := 	$(SRC:.cpp=.o)
HH  := 	$(shell ls $(srcdir)/*.h)

LIBS =  $(ARMALIB)

.PHONY: all
all: $(LIBCHEM) 

.PHONY: doc
doc:
	doxygen libchem.cfg

.PHONY: apps
apps: all
	cd ./src && $(MAKE) all

.PHONY: tests
tests: all
	cd ./tests && $(MAKE) all

.PHONY: install
install: all
	if ! test -d $(DESTDIR)$(includedir)/chem ; then \
		mkdir $(DESTDIR)$(includedir)/chem ; \
	fi 
	if test -d $(DESTDIR)$(includedir)/chem ; then \
		for H in $(HH) ; do \
			cp -f $$H $(DESTDIR)$(includedir)/chem ; \
		done ; \
	fi  
	if test -d $(DESTDIR)$(libdir) ; then \
		cp -f $(LIBCHEM) $(DESTDIR)$(libdir) ; \
	fi 

.PHONY: uninstall
uninstall:
	rm -f $(DESTDIR)$(libdir)/$(LIBSHARED) 
	rm -f $(DESTDIR)$(libdir)/$(LIBSTATIC)
	for H in $(notdir $(HH)) ; do \
		rm -f $(DESTDIR)$(includedir)/chem/$$H ; \
	done 

.PHONY: clean
clean:
	rm -f $(LIBCHEM) $(OBJ) 
	cd ./src && $(MAKE) clean
	cd ./tests && $(MAKE) clean

.PHONY: distclean
distclean: clean
	rm -f *~ *.bak *.tmp *.stackdump core
	cd $(srcdir) && rm -f *~ *.bak *.tmp *.d *.gch TAGS
	cd ./html && rm -f *.*
	cd ./src && $(MAKE) distclean
	cd ./tests && $(MAKE) distclean

.PHONY: TAGS
TAGS:
	etags $(srcdir)/*.cpp $(srcdir)/*.h

$(LIBSHARED): $(OBJ) 
	$(CXX) $(CXXFLAGS) $(DEFS) $(LDFLAGS) -o $@ $^ $(LIBS)

$(LIBSTATIC): $(OBJ)
	$(AR) rcs $@ $^

%.o : %.cpp
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(DEFS) -o $@ -c $< 

%.d : %.cpp
	$(CXX) $(DEPFLAGS) $(CPPFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

-include $(SRC:.cpp=.d) 

